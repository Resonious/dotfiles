#!/bin/bash

# Tests whether or not we can infer ruby version based on Gemfile
has_gemfile_with_ruby_version() {
  [ -e Gemfile ] && [ -n "$(awk '/ruby /{print}' Gemfile)" ]
}

# Tests whether the first argument is a ruby version
first_arg_is_ruby_version() {
  [ -n "$1" ] && [ "$1" != "do" ]
}

# Prints command to run (if specified)
command_to_do() {
  if first_arg_is_ruby_version $1; then
    if [ "$2" == "do" ]; then
      echo "${@:3}"
    else
      return 1
    fi
  else
    if [ "$1" == "do" ]; then
      echo "${@:2}"
    else
      return 1
    fi
  fi
}

# Prints a string like "ruby_2_4" based on input or Gemfile
ruby_version() {
  if first_arg_is_ruby_version $1; then
    printf 'ruby_'
    awk '{gsub(" .|\\.", "_"); print substr($0,1,8);}' <(echo $1)
  else
    if has_gemfile_with_ruby_version; then
      awk '/ruby /{gsub(" .|\\.", "_"); print substr($0,1,8);}' Gemfile
    fi
  fi
}

#
# See if input is valid
#
print_help() {
  cat <<MESSAGE 1>&2
Please either have a Gemfile with a ruby version, or specify which version you want.

Examples:

  $ # Without Gemfile:
  $ nixrb 2.5
  $ nixrb 2.5 do ruby -e 'puts RUBY_VERSION'

  $ # With Gemfile:
  $ nixrb 2.5
  $ nixrb do ruby -e 'puts RUBY_VERSION'
MESSAGE
}
if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ "$1" == "help" ]; then
  print_help
  exit 0
fi
if ! first_arg_is_ruby_version $1 && ! has_gemfile_with_ruby_version; then
  print_help
  exit 1
fi

#
# Write temporary nix shell script
#
ruby=$(ruby_version $1)
nixfile="/tmp/${ruby}_shell.nix"

cat <<NIX_SHELL > "$nixfile"
let
  pkgs = import <nixpkgs> {};
  ruby = pkgs.$ruby.withPackages (ps: with ps; [ pkgs.bundler ]);
in
  pkgs.stdenv.mkDerivation {
    name = "${ruby}_shell";
    src = null;
    buildInputs = [
      ruby
      pkgs.zlib
      pkgs.xz
      pkgs.libmysqlclient
      pkgs.curl
      pkgs.libnghttp2
    ];
  }
NIX_SHELL

#
# Start the shell
#
if command_to_do $@ 1>/dev/null 2>/dev/null; then
  exec nix-shell "$nixfile" --command "$(command_to_do $@)"
else
  exec nix-shell "$nixfile"
fi
